<DEF:pond> <INT_KEYWORD:duck_int> <ID:quack_quack> <PARENTHESIS_OPEN:(> <INT_KEYWORD:duck_int> <ID:quacku> <COMMA:,> <INT_KEYWORD:duck_int> <ID:quacka> <PARENTHESIS_CLOSE:)> <NEW_LINE:NEW_LINE> <BLOCK_OPEN:(*)>> <NEW_LINE:NEW_LINE> <IF:quack_if> <ID:quacka> <EQUAL:==> <INT:0> <NEW_LINE:NEW_LINE> <BLOCK_OPEN:(*)>> <NEW_LINE:NEW_LINE> <RETURN:quack_back> <ID:quacku> <NEW_LINE:NEW_LINE> <BLOCK_CLOSE:<(*)> <NEW_LINE:NEW_LINE> <RETURN:quack_back> <ID:quack_quack> <PARENTHESIS_OPEN:(> <ID:quacku> <PLUS:+> <INT:1> <COMMA:,> <ID:quacka> <MINUS:-> <INT:1> <PARENTHESIS_CLOSE:)> <NEW_LINE:NEW_LINE> <BLOCK_CLOSE:<(*)> <NEW_LINE:NEW_LINE> <MAIN:quackier> <NEW_LINE:NEW_LINE> <BLOCK_OPEN:(*)>> <NEW_LINE:NEW_LINE> <PRINT:quack_it> <PARENTHESIS_OPEN:(> <STRING:"Suma de 1 + 5 de forma recursiva"> <PARENTHESIS_CLOSE:)> <NEW_LINE:NEW_LINE> <PRINT:quack_it> <PARENTHESIS_OPEN:(> <ID:quack_quack> <PARENTHESIS_OPEN:(> <INT:1> <COMMA:,> <INT:5> <PARENTHESIS_CLOSE:)> <PARENTHESIS_CLOSE:)> <NEW_LINE:NEW_LINE> <BLOCK_CLOSE:<(*)> <NEW_LINE:NEW_LINE>